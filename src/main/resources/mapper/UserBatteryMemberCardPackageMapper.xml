<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xiliulou.electricity.mapper.UserBatteryMemberCardPackageMapper">

    <resultMap type="com.xiliulou.electricity.entity.UserBatteryMemberCardPackage" id="UserBatteryMemberCardPackageMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="uid" column="uid" jdbcType="INTEGER"/>
        <result property="memberCardId" column="member_card_id" jdbcType="INTEGER"/>
        <result property="orderId" column="order_id" jdbcType="VARCHAR"/>
        <result property="tenantId" column="tenant_id" jdbcType="INTEGER"/>
        <result property="createTime" column="create_time" jdbcType="INTEGER"/>
        <result property="updateTime" column="update_time" jdbcType="INTEGER"/>
        <result property="memberCardExpireTime" column="member_card_expire_time" jdbcType="INTEGER"/>
        <result property="remainingNumber" column="remaining_number" jdbcType="INTEGER"/>
    </resultMap>

    <select id="checkUserBatteryMemberCardPackageByUid" resultType="Integer">
       SELECT	1 FROM	t_user_battery_member_card_package ubmcp	LEFT JOIN t_battery_member_card bmc ON ubmcp.member_card_id = bmc.id
       WHERE	bmc.is_refund = 0 	AND ubmcp.uid = #{uid} LIMIT 1
    </select>

    <select id="selectByUid" resultMap="UserBatteryMemberCardPackageMap">
        select
          id, uid, member_card_id, order_id, tenant_id, create_time, update_time, member_card_expire_time, remaining_number, status
        from t_user_battery_member_card_package
        where uid = #{uid}
    </select>

    <select id="selectByOrderNo" resultMap="UserBatteryMemberCardPackageMap">
        select
          id, uid, member_card_id, order_id, tenant_id, create_time, update_time, member_card_expire_time, remaining_number, status
        from t_user_battery_member_card_package
        where order_id = #{orderId}
    </select>

    <select id="selectNearestByUid" resultMap="UserBatteryMemberCardPackageMap">
        select
          id, uid, member_card_id, order_id, tenant_id, create_time, update_time, member_card_expire_time, remaining_number, status
        from t_user_battery_member_card_package
        where uid = #{uid} order by id limit 1
    </select>
    
    <select id="listChannelByUid" resultType="com.xiliulou.electricity.entity.UserBatteryMemberCardPackage">
        SELECT
            id,
            uid,
            member_card_id,
            order_id,
            tenant_id,
            create_time,
            update_time,
            member_card_expire_time,
            remaining_number,
            STATUS
        FROM
            t_user_battery_member_card_package a
        WHERE
            uid = #{uid}
          AND EXISTS (
            SELECT
                1
            FROM
                t_battery_member_card b
            WHERE
                a.member_card_id = b.id
              AND b.business_type = 2
            )
    </select>
    
    <select id="selectLastEnterprisePackageByUid" resultType="com.xiliulou.electricity.bo.batteryPackage.UserBatteryMemberCardPackageBO">
        SELECT
            p.id, p.uid, p.member_card_id, p.order_id,c.deposit,c.limit_count
        FROM
            t_user_battery_member_card_package p
                left join t_battery_member_card c on c.id = p.member_card_id
        where
            p.uid = #{uid}
          and c.business_type = 2
        order by p.id desc
            limit 1
    </select>
    
    <select id="selectListByUidList" resultType="com.xiliulou.electricity.bo.batteryPackage.UserBatteryMemberCardPackageBO">
        select t1.uid, t1.member_card_id, t1.order_id, t2.pay_type, t2.create_time
        from t_user_battery_member_card_package t1
        left join t_electricity_member_card_order t2 on t1.order_id = t2.order_id
        where t1.tenant_id = #{tenantId} and t1.uid in
        <foreach collection="uidList" item="uid" open="(" separator="," close=")">
            #{uid}
        </foreach>
    </select>
    
    <!--通过主键删除-->
    <delete id="deleteById">
        delete from t_user_battery_member_card_package where id = #{id}
    </delete>

    <delete id="deleteByUid">
        delete from t_user_battery_member_card_package where uid = #{uid}
    </delete>

    <delete id="deleteByOrderId">
        delete from t_user_battery_member_card_package where order_id = #{orderId}
    </delete>
    
    <delete id="deleteChannelMemberCardByUid">
        delete
        FROM
            t_user_battery_member_card_package a
        WHERE
            uid = #{uid}
          AND EXISTS (
            SELECT 1 FROM t_battery_member_card b WHERE a.member_card_id = b.id and b.business_type = 2
            )
    </delete>
</mapper>
